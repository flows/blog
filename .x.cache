{"requires":["glob@3.x.x","marked@0.x.x","handlebars@1.x.x","fs.extra@1.x.x"],"nodeDefinitions":{"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json":{"path":{"basename":{"name":"basename","ns":"path","description":"Path basename","require":{"path":"builtin"},"phrases":{"active":"Getting basename for {{input.path}} and extension {{input.ext}}"},"ports":{"input":{"path":{"title":"Path","type":"string"},"ext":{"title":"Extension","type":"string"}},"output":{"result":{"title":"Result","type":"string"}}},"fn":"output = {\n  result: path.basename(input.path, input.ext)\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"BaseName"}},"object":{"set":{"name":"set","ns":"object","description":"Set a property on an object, or else create a new object and set the property","phrases":{"active":"Setting property {{input.key}}"},"ports":{"input":{"in":{"title":"Value","type":"any"},"key":{"title":"Key","type":"string"},"object":{"title":"Object","type":"object","default":null}},"output":{"out":{"title":"out","type":"object"}}},"fn":"var obj = input.object ? input.object : {};\nobj[input.key] = input. in ;\noutput.out = obj;\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"MainBody"},"group":{"name":"group","ns":"object","async":true,"description":"Groups input into an array","phrases":{"active":"Grouping object"},"expose":["chi"],"ports":{"input":{"in":{"title":"Object","type":"any"},"xin":{"title":"In Group","type":"any"}},"output":{"out":{"title":"out","group":"result","type":"any"},"xout":{"title":"Xout","type":"array"}}},"fn":"on.input. in = function () {\n  // x contains our keys\n  for (var gid in x) {\n\n    if(!state.hasOwnProperty(gid)) {\n      state[gid] = {\n        items: [],\n        total: null,\n        complete: false\n      };\n    }\n\n    state[gid].items.push(data);\n\n    if (state[gid].complete &&\n      state[gid].total === (state[gid].items.length)) {\n\n      var g = chi.group('xout', output);\n      output({\n        out: state[gid].items\n      }, g.item());\n\n      g.done();\n\n      delete state[gid];\n\n    }\n\n  }\n};\n\non.input.xin = function () {\n\n  if(!state.hasOwnProperty(data.gid)) {\n    state[data.gid] = {\n      items: [],\n      total: null,\n      complete: false\n    };\n  }\n\n  if (data.complete) {\n    state[data.gid].total = data.items.length;\n    state[data.gid].complete = true;\n\n    // ok sometimes at this point we already have everything...\n    // I wonder if the function stays in scope, i think not.\n    if (state[data.gid].complete &&\n      state[data.gid].total === (state[data.gid].items.length)) {\n\n      var g = chi.group('xout', output);\n      output({\n        out: state[data.gid].items\n      }, g.item());\n\n      g.done();\n\n      delete state[data.gid];\n\n    }\n  }\n};\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"WriteResults"}},"fs":{"exists":{"name":"exists","ns":"fs","description":"fs exists","phrases":{"active":"Checking whether file {{input.path}} exists"},"require":{"fs":"builtin"},"ports":{"input":{"path":{"type":"string"}},"output":{"exists":{"title":"Exists","type":"boolean"}}},"env":"server","fn":"output = [fs, 'exists', input.path]\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"Exists"},"glob":{"name":"glob","ns":"fs","title":"Glob","description":"Match files using the patterns the shell uses, like stars and stuff.","require":{"glob":"3.x.x"},"expose":["chi"],"phrases":{"active":"Globbing with pattern: {{input.pattern}}"},"ports":{"input":{"match":{"type":"string","title":"Pattern","description":"Pattern to be matched","required":true}},"output":{"error":{"type":"event","title":"Error","description":"Emitted when an unexpected error is encountered, or whenever any fs error occurs if `options.strict` is set."},"matches":{"type":"array","title":"Matches","description":"Filenames found matching the pattern"},"end":{"type":"event","title":"End","description":"When the matching is finished, this is emitted with all the matches found. If the `nonull` option is set, and no match was found, then the `matches` list contains the original pattern. The matches are sorted, unless the `nosort` flag is set."},"match":{"type":"event","title":"Match","description":"Every time a match is found, this is emitted with the matched."},"xmatch":{"type":"event","title":"Xmatch","description":"Used for transmitting the groupID."},"abort":{"type":"event","title":"Abort","description":"When `abort()` is called, this event is raised."}}},"fn":"output = function (cb) {\n\n  var g = chi.group('xmatch', cb);\n\n  var mg = new glob.Glob(input.match, {}, function (err, matches) {\n\n    cb({\n      matches: matches\n    });\n\n    g.done();\n\n    done();\n\n  });\n\n  mg.on('match', function (match) {\n\n    cb({\n      match: match\n    }, g.item());\n\n  });\n\n  mg.on('error', function (err) {\n\n    cb({\n      error: err\n    });\n\n  });\n\n  mg.on('abort', function () {\n\n    cb({\n      abort: null\n    });\n\n  });\n\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json"},"mkdir":{"name":"mkdir","ns":"fs","description":"fs mkdir","phrases":{"active":"Creating directory {{input.path}}"},"require":{"fs":"builtin"},"ports":{"input":{"path":{"title":"Path","type":"string","required":true},"mode":{"title":"Mode","type":"number","default":"0777"}},"output":{"exception":{"title":"Exception","type":"object"}}},"env":"server","fn":"output = [fs, 'mkdir', input.path, input.mode]\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"MkDir"},"file":{"name":"file","ns":"fs","description":"Create a filename based on dir, name and optional extenstion","phrases":{"active":"Created filename {{input.dir}}/{{input.name}}{{input.ext}}"},"require":{"path":"builtin"},"ports":{"input":{"name":{"title":"Name","type":"string","required":true},"dir":{"title":"Directory","type":"string"},"ext":{"title":"Extension","type":"string"}},"output":{"file":{"title":"File","type":"string"}}},"env":"server","fn":"var file = input.ext ? input.name + input.ext : input.name;\noutput.file = input.dir ? path.normalize([input.dir, file].join(path.sep)) : file;\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"HtmlFile"},"readFile":{"name":"readFile","ns":"fs","title":"SiteFile","description":"fs readFile","phrases":{"active":"Reading file {{input.file}} ({{input.options.encoding}}, {{input.options.flag}})"},"require":{"fs":"builtin"},"ports":{"input":{"file":{"title":"Filename","type":"string","required":true},"encoding":{"title":"Encoding","type":"string","default":"utf-8"},"flag":{"title":"Flag","type":"string","default":"r"}},"output":{"error":{"type":"object"},"out":{"type":"object"}}},"env":"server","fn":"output = [fs, 'readFile', input.file, {\n  flag: input.flag,\n  encoding: input.encoding\n}];\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json"},"writeFile":{"name":"writeFile","ns":"fs","description":"fs writeFile","phrases":{"active":"Writing file {{input.file}}"},"require":{"fs":"builtin"},"ports":{"input":{"file":{"type":"string"},"in":{"type":"string"},"encoding":{"title":"Encoding","type":"string","default":"utf-8"},"mode":{"title":"Mode","type":"number","default":438},"flag":{"title":"Flag","type":"string","default":"w"}},"output":{"error":{"title":"Error","type":"object"}}},"env":"server","fn":"output = [fs, 'writeFile', input.file, input.in, {\n  encoding: input.encoding,\n  mode: input.mode,\n  flag: input.flag\n}];\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"WriteFile"},"move":{"name":"move","ns":"fs","title":"MoveInstagram","description":"Moves a file","phrases":{"active":"Moving file from {{input.from}} to {{input.to}}"},"require":{"fs.extra":"1.x.x"},"ports":{"input":{"from":{"title":"From Filename","type":"string","required":true},"to":{"title":"To Filename","type":"string","required":true}},"output":{"error":{"title":"Error","type":"object"}}},"env":"server","fn":"output = [fs_extra, 'move', input.from, input.to]\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json"},"unlink":{"name":"unlink","ns":"fs","description":"fs unlink","phrases":{"active":"Unlinking file {{input.path}}"},"require":{"fs":"builtin"},"ports":{"input":{"path":{"title":"Path","type":"string"}},"output":{"exception":{"title":"Exception","type":"object"}}},"env":"server","fn":"output = [fs, 'unlink', input.path]\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"RemoveInsta"}},"conditional":{"true":{"name":"true","title":"HasDir","ns":"conditional","description":"Whether the input is true or false","phrases":{"active":"Determining truth"},"ports":{"input":{"in":{"type":"boolean","title":"A boolean"}},"output":{"yes":{"type":"boolean","title":"Yes"},"no":{"type":"boolean","title":"No"}}},"fn":"output = {\n  yes: !! input. in ,\n  no: !input. in\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json"}},"data":{"string":{"name":"string","ns":"data","title":"HtmlDir","async":true,"description":"String","phrases":{"active":"Creating string {{input.string}}"},"ports":{"input":{"in":{"title":"String","type":"any","async":true,"required":true}},"output":{"out":{"title":"out","type":"string"}}},"fn":"on.input.in = function() {\n  output( { out: typeof data === null ? 'null' : data.toString() });\n};\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json"}},"console":{"log":{"name":"log","ns":"console","description":"Console log","async":true,"phrases":{"active":"Logging to console"},"ports":{"input":{"msg":{"type":"any","title":"Log message","description":"Logs a message to the console","async":true,"required":true}},"output":{"out":{"type":"any","title":"Log message"}}},"fn":"on.input.msg = function() {\n  console.log(data);\n  output( { out: data });\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"Log"}},"template":{"markdown":{"name":"markdown","ns":"template","description":"Markdown","phrases":{"active":"Creating markdown document"},"require":{"marked":"0.x.x"},"ports":{"input":{"in":{"type":"string","title":"Body","format":"markdown","description":"The body of this markdown document","required":true}},"output":{"out":{"title":"HTML","type":"string"}}},"fn":"output = {\n  out: marked(input.in)\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"Markdown"},"handlebars":{"name":"handlebars","ns":"template","description":"Handlebars Template engine","require":{"handlebars":"1.x.x"},"phrases":{"active":"Compiling handlebars template"},"ports":{"input":{"body":{"type":"string","format":"html","title":"Template body","description":"The body of the handlebars template","required":true},"vars":{"type":"object","title":"Input variables","description":"the input variables for this template","required":true},"handlebars":{"type":"function","title":"Handlebars","default":null}},"output":{"out":{"title":"HTML","type":"string"}}},"fn":"var hb = input.handlebars || handlebars;\nvar tpl = hb.compile(input.body);\noutput = {\n  out: tpl(input.vars)\n}\n","provider":"https://raw.github.com/psichi/chix-platform/master/nodes/{ns}/{name}.json","title":"SiteTemplate"}}}}}